////
/// Dropdown Component Styles
/// @group dropdown
/// @since v0.8.34
////

$dropdown-default-settings: (
  background-color: color(white),
  border-color: color(border),
  z-index: 100,

  link: (
    color: color(text),
    hover-color: color(black),
    hover-background-color: color(border),
    active-color: color(link),
    active-background-color: color(border, light),
    disabled-color: color(text, small)
  ),

  search: (
    padding-inner: 3px,
    icon-size: 32px,
    results-height: 15em
  )
);

$dropdown: () !default;
$dropdown: map-merge-settings($dropdown-default-settings, $dropdown);

$include-html-paint-dropdown: true !default;

@function dropdown-settings($setting, $property: null) {
  @if $property {
    @return map-get(map-get($dropdown, $setting), $property);
  } @else {
    @return map-get($dropdown, $setting);
  }
}

/// DEPRECATED variables - will be removed with 0.9.x

$dropdown-background-color: dropdown-settings(background-color);
$dropdown-border-color: dropdown-settings(border-color);
$dropdown-z-index: dropdown-settings(z-index);
$dropdown-search-inner-padding: dropdown-settings(search, padding-inner);
$dropdown-search-icon-size: dropdown-settings(search, icon-size);
$dropdown-search-results-height: dropdown-settings(search, results-height);
$dropdown-link-hover-background-color: dropdown-settings(hover-background-color);

@mixin dropdown-triangle($size, $color, $direction, $adjust: 0) {
  $background-color: if(length($color) == 2, nth($color, 2), transparent);
  $foreground-color: nth($color, 1);
  $height: nth($size, length($size));
  $width: nth($size, 1);

  content: '';
  height: 0;
  position: absolute;
  width: 0;

  @if ($direction == top) or ($direction == bottom) or ($direction == right) or ($direction == left) {
    $width: $width / 2;
    $height: if(length($size) > 1, $height, $height/2);

    @if $direction == bottom {
      border-bottom: $height solid $foreground-color;
      border-left: $width solid $background-color;
      border-right: $width solid $background-color;
      left: ($size - $adjust);
      top: - $size / 2;

    } @else if $direction == left {
      border-bottom: $width solid $background-color;
      border-left: $height solid $foreground-color;
      border-top: $width solid $background-color;
      right: - $size / 2;
      top: ($size - $adjust);

    } @else if $direction == top {
      border-left: $width solid $background-color;
      border-right: $width solid $background-color;
      border-top: $height solid $foreground-color;
      bottom: - $size / 2;
      left: ($size - $adjust);

    } @else if $direction == right {
      border-bottom: $width solid $background-color;
      border-right: $height solid $foreground-color;
      border-top: $width solid $background-color;
      left: - $size / 2;
      top: ($size / 2 - $adjust);
    }
  }
}

@mixin dropdown-triangle-shade($size: 12px, $direction: bottom, $color: color(border) color(white), $adjust: 3px) {
  $foreground-color: if(length($color) == 2, nth($color, 2), transparent);
  $background-color: nth($color, 1);
  $background-size: ($size + $adjust);

  &:before {
    @include dropdown-triangle($background-size, $background-color, $direction, ($adjust + 1px));
  }

  &:after {
    @include dropdown-triangle($size, $foreground-color, $direction);
  }
}

@mixin dropdown-directions {
  $directions: (
    bottom: (
      left: 0,
      top: 100%
    ),
    top: (
      bottom: 100%,
      top: auto
    ),
    left: (
      left: 0,
      right: auto,
      top: 0
    ),
    right: (
      left: auto,
      right: 0,
      top: 0
    )
  );

  $other-directions-string: '';

  @each $direction, $properties in $directions {
    &.#{$direction} {
      @include dropdown-triangle-shade($direction: $direction);

      @each $property, $value in $properties {
        #{$property}: #{$value};
      }
    }

    $other-directions-string: $other-directions-string + ':not(.#{$direction})';
  }

  &#{$other-directions-string} {
    @include dropdown-triangle-shade(bottom);
  }
}

@mixin dropdown-with-search() {
  .input {
    cursor: auto;
    padding: dropdown-settings(search, padding-inner)
      dropdown-settings(search, padding-inner) * 2;
    position: relative;

    &:hover {
      background-color: transparent;
    }

    > div,
    .icon {
      height: dropdown-settings(search, icon-size);
      left: dropdown-settings(search, padding-inner);
      margin: dropdown-settings(search, padding-inner) * 2 0;
      overflow: hidden;
      position: absolute;
      text-align: center;
      top: dropdown-settings(search, padding-inner);
      width: dropdown-settings(search, icon-size);

      i {
        @include icon(search);

        color: color(primary);
        display: block;
        line-height: dropdown-settings(search, icon-size);
      }
    }

    > input {
      @include form-input;

      display: block;
      height: dropdown-settings(search, icon-size);
      line-height: dropdown-settings(search, icon-size);
      margin: dropdown-settings(search, padding-inner) * 2 0;
      padding-left: dropdown-settings(search, icon-size);
      width: 100%;
    }
  }

  .results {
    margin: 0;
    max-height: dropdown-settings(search, results-height);
    overflow-x: hidden;
    overflow-y: scroll;
    padding: 0;

    > ul {
      margin: 0;
      padding: 0;

      > li {
        @extend %dropdown-item;

        cursor: pointer;
        padding: dropdown-settings(search, padding-inner)
          $column-gutter / 4;

        &:hover {
          background-color: dropdown-settings(link, hover-background-color);
        }
      }
    }
  }
}

%dropdown {
  position: relative;

  .toggle:focus {
    outline: 0;
  }

  > ul {
    @include dropdown-directions;

    background-clip: padding-box;
    background-color: dropdown-settings(background-color);
    border: 1px solid dropdown-settings(border-color);
    border-radius: $global-radius / 2;
    box-shadow: 0 2px 3px rgba(0, 0, 0, .175);
    display: none;
    float: left;
    font-size: $base-font-size;
    list-style: none;
    margin: 0;
    min-width: 100px;
    position: absolute;
    text-align: left;
    z-index: dropdown-settings(z-index);

    .divider {
      border-bottom: 1px solid dropdown-settings(border-color);
      margin: $column-gutter / 4;
    }

    > li {
      @extend %dropdown-item;
    }

    &.open {
      display: block;
    }
  }
}

%dropdown-item {
  border-bottom: 1px solid dropdown-settings(border-color);

  &:last-child {
    border-bottom: 0;
  }

  &.active > a {
    &,
    &:hover,
    &:focus {
      background-color: dropdown-settings(link, active-background-color);
      color: dropdown-settings(link, active-color);
      outline: 0;
      text-decoration: none;
    }
  }

  &.disabled > a {
    &,
    &:hover,
    &:focus {
      color: dropdown-settings(link, disabled-color);
    }

    &:hover,
    &:focus {
      background-color: transparent;
      cursor: not-allowed;
      text-decoration: none;
    }
  }

  > a {
    clear: both;
    color: dropdown-settings(link, color);
    cursor: pointer;
    display: block;
    font-weight: $font-weight-normal;
    line-height: $base-line-height;
    padding: 0 $column-gutter / 2;
    white-space: nowrap;

    &:hover,
    &:focus {
      background-color: dropdown-settings(link, hover-background-color);
      color: dropdown-settings(link, hover-color);
      text-decoration: none;
    }
  }
}

%dropdown-inline {
  > ul {
    line-height: 0;
    min-width: 0;
    padding: 0;
    text-align: center;
    white-space: nowrap;

    > li {
      display: inline-block;
    }
  }
}

%dropdown-inverted {
  > ul {
    background-color: dropdown-settings(link, hover-background-color);
    color: dropdown-settings(link, hover-color);

    > li:hover,
    > li a:hover {
      background-color: dropdown-settings(background-color);
      color: dropdown-settings(link, color);
    }
  }
}

%dropdown-over {
  > ul {
    top: 0;

    &:before {
      display: none;
    }
  }
}

@include exports('paint-dropdown') {
  @if $include-html-paint-dropdown {
    .dropdown {
      @extend %dropdown;
    }

    .dropdown-inline {
      @extend %dropdown;
      @extend %dropdown-inline;
    }

    .dropdown-inverted {
      @extend %dropdown;
      @extend %dropdown-inverted;
    }

    .dropdown-over {
      @extend %dropdown;
      @extend %dropdown-over;
    }

    .dropdown-search {
      @extend %dropdown;
      @include dropdown-with-search;
    }
  }
}
