////
/// Steps
/// @group step
/// @since v0.8.33
////

/// Default settings

/// @example html - Steps with border and icons
///   <ol class="steps with-border with-icons">
///     <li><a>First Step</a></li>
///     <li class="highlighted"><a>Second Step</a></li>
///     <li class="active"><span>Current</span></li>
///     <li><span>Inactive</span></li>
///     <li><span>Inactive</span></li>
///     <li><span>Inactive</span></li>
///   </ol>
///
/// @example html - Steps with border and counts
///   <ol class="steps with-border with-counts">
///     <li class="highlighted with-pre"><span>10</span><a>First Item</a></li>
///     <li class="highlighted with-pre"><span>8</span><a>Second Item</a></li>
///     <li class="active"><span>Current</span></li>
///     <li class="with-post"><span>Inactive Item</span><span>0</span></li>
///     <li class="with-post"><span>Inactive Item</span><span>0</span></li>
///     <li><span>Inactive</span></li>
///   </ol>
///
/// @example scss - Custom steps
///   .basic-breadbrumb,
///   .border-steps,
///   .icon-steps {
///     @extend %steps;
///   }
///
///   .icon-steps {
///     @extend %steps-with-icons;
///   }
///
///   .border-steps {
///     @extend %steps-with-border;
///   }

$step-default-settings: (
  height: $button-small-height,

  colors: (
    inactive-background: color(border, light),
    inactive-border: color(border),
    inactive-count: color(border),
    highlighted-background: color(info, light),
    highlighted-border: color(gray),
    highlighted-count: color(gray),
    active-background: color(primary, light),
    active-border: color(primary),
    active-count: color(primary, dark),
  ),

  selectors: (
    highlighted: '.highlighted',
    active: '.active'
  )
);

$step: () !default;
$step: map-merge-settings($step-default-settings, $step);

$include-html-paint-step: true !default;

@function step-settings($setting, $property: null) {
  $output: map-get($step, $setting);

  @if $property {
    $output: map-get(map-get($step, $setting), $property);
  }

  @if type-of($output) == string {
    @return unquote($output);
  } @else {
    @return $output;
  }
}

/// Default steps placeholder, acts like a breadcrumb

%steps {
  @extend %grid-row;

  li {
    display: inline-block;
    float: left;
    margin: $column-gutter / 4 0;

    &::after {
      color: step-settings(colors, inactive-border);
      content: '\00bb';
      display: inline-block;
      margin: 0 $column-gutter / 4;
    }

    &:last-of-type::after {
      display: none;
    }

    > * {
      color: step-settings(colors, inactive-border);
      display: inline-block;
    }

    &#{step-settings(selectors, highlighted)} > * {
      color: step-settings(colors, highlighted-border);
    }

    &#{step-settings(selectors, active)} > * {
      color: step-settings(colors, active-border);
    }
  }

  .no-touch & a:hover {
    color: step-settings(colors, highlighted-border);
  }
}

@mixin steps-icon-default {
  @include icon(circle-o, before);

  &:before {
    margin-right: $column-gutter / 4;
  }
}

/// Steps extention placeholder, allows use of icons
/// @require {placeholder} steps

%steps-with-icons {
  li {
    &#{step-settings(selectors, highlighted)} > *:first-child {
      @include icon(check, before);
    }

    &#{step-settings(selectors, active)} > *:first-child {
      @include icon(dot-circle-o, before);
    }

    > * {
      line-height: step-settings(height) !important;

      &:first-child {
        @include steps-icon-default;
      }
    }
  }
}

/// Steps extention placeholder, adds a border around elements
/// @require {placeholder} steps

%steps-with-border {
  @media #{$medium-up} {
    text-align: center;

    li {
      float: none;
      margin: $column-gutter / 4 $column-gutter $column-gutter / 4 0;
      position: relative;

      &:last-of-type {
        margin-right: 0;
      }

      &::after {
        background: step-settings(colors, inactive-border);
        content: '';
        height: 1px;
        left: 100%;
        margin: 0;
        position: absolute;
        top: 50%;
        transform: translateY(-50%) translateX(-1px);
        width: 50%;
      }

      &#{step-settings(selectors, highlighted)} {
        &:after {
          background-color: step-settings(colors, highlighted-border);
        }

        > * {
          @include detached-border(step-settings(colors, highlighted-border));

          background-color: step-settings(colors, highlighted-background);
          color: contrast(step-settings(colors, highlighted-background));

        }

        > *:hover {
          background-color: lighten(step-settings(colors, highlighted-background), 3%);
        }
      }

      &#{step-settings(selectors, active)} > * {
        @include detached-border(step-settings(colors, active-border));

        background-color: step-settings(colors, active-background);
        color: contrast(step-settings(colors, active-background));

        &:hover {
          background-color: lighten(step-settings(colors, active-background), 7%);
        }
      }

      > * {
        @include detached-border(step-settings(colors, inactive-border));

        background-color: step-settings(colors, inactive-background);
        border-radius: $global-radius;
        color: contrast(step-settings(colors, inactive-background));
        line-height: step-settings(height);
        padding: 0 $column-gutter / 2 !important;
        position: relative;
        z-index: 1;

        &:hover {
          background-color: lighten(step-settings(colors, inactive-background), 3%);
        }
      }
    }
  }
};

/// Steps extention placeholder, allows adding pre or post content
/// @require {placeholder} steps
/// @require {placeholder} steps-with-border

%steps-with-counts {
  li {
    &.with-pre > *:first-child,
    &.with-post > *:last-child {
      font-weight: $font-weight-bold;
    }

    &.with-pre > *:first-child {
      padding-right: $column-gutter / 6;
    }

    &.with-post > *:last-child {
      padding-left: $column-gutter / 6;
    }
  }

  @media #{$medium-up} {
    .with-pre > *:first-child,
    .with-post > *:last-child {
      padding-left: $column-gutter / 6;
      padding-right: $column-gutter / 6;
    }

    .with-pre {
      &#{step-settings(selectors, highlighted)} > *:first-child {
        background-color: step-settings(colors, highlighted-count);
        color: contrast(step-settings(colors, highlighted-count));
      }

      &#{step-settings(selectors, active)} > *:first-child {
        background-color: step-settings(colors, active-count);
        color: contrast(step-settings(colors, active-count));
      }

      > *:first-child {
        background-color: step-settings(colors, inactive-count);
        border-bottom-right-radius: 0;
        border-top-right-radius: 0;
        color: contrast(step-settings(colors, inactive-count));
      }

      > *:last-child {
        border-bottom-left-radius: 0;
        border-left-width: 0;
        border-top-left-radius: 0;
      }
    }

    .with-post {
      &#{step-settings(selectors, highlighted)} > *:last-child {
        background-color: step-settings(colors, highlighted-count);
        color: contrast(step-settings(colors, highlighted-count));
      }

      &#{step-settings(selectors, active)} > *:last-child {
        background-color: step-settings(colors, active-count);
        color: contrast(step-settings(colors, active-count));
      }

      > *:first-child {
        border-bottom-right-radius: 0;
        border-right-width: 0;
        border-top-right-radius: 0;
      }

      > *:last-child {
        background-color: step-settings(colors, inactive-count);
        border-bottom-left-radius: 0;
        border-top-left-radius: 0;
        color: contrast(step-settings(colors, inactive-count));
      }
    }
  }
}

@include exports('paint-step') {
  @if $include-html-paint-step {
    .steps {
      @extend %steps;

      &.with-border {
        @extend %steps-with-border;
      }

      &.with-icons {
        @extend %steps-with-icons;
      }

      &.with-counts {
        @extend %steps-with-counts;
      }
    }
  }
}
