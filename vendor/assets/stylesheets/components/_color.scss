////
/// Colors / Palettes Component
/// @group color
/// @since v0.8.16
////

/// Default color palettes and general color settings

$colors-default-settings: (
  text: (
    base: #222222,
    small: #888888
  ),

  link: (
    base: #008fd9,
    dark: link (darken: 10%),
    light: link (lighten: 10%)
  ),

  border: (
    base: #ececec,
    dark: border (darken: 10%),
    light: border (lighten: 5%)
  ),

  primary: (
    base: #f36b09,
    dark: primary (darken: 20%),
    light: primary (lighten: 40%)
  ),

  secondary: (
    base: #a42524,
    dark: secondary (darken: 15%),
    light: secondary (lighten: 45%)
  ),

  alert: (
    base: #ff7f7d,
    dark: alert (darken: 35%),
    light: alert (lighten: 18%)
  ),

  warning: (
    base: #ffcc7a,
    dark: warning (darken: 35%),
    light: warning (lighten: 15%)
  ),

  success: (
    base: #43ac6a,
    dark: success (darken: 20%, saturate: 20%),
    light: success (lighten: 30%)
  ),

  info: (
    base: #a0d3e8,
    dark: info (darken: 35%, saturate: 30%),
    light: info (lighten: 10%)
  ),

  white: #ffffff,
  black: #000000,

  gray: (
    ghost: #fafafa,
    snow: #f9f9f9,
    vapor: #f6f6f6,
    white-smoke: #f5f5f5,
    silver: #efefef,
    smoke: #eeeeee,
    gainsboro: #dddddd,
    iron: #cccccc,
    base: #aaaaaa,
    aluminum: #999999,
    jumbo: #888888,
    monsoon: #777777,
    steel: #666666,
    charcoal: #555555,
    tuatara: #444444,
    oil: #333333,
    jet: #222222
  )
);

$colors: () !default;
$colors: map-merge-settings($colors-default-settings, $colors);

/// Fetch a color from a palette group / setting
/// @param {color | palette} $color - Single color, palette variant or solid color
/// @return {Color}
///
/// @example scss - Usage
///   text-color: color(primary);
///   background-color: color(primary, light);
///   border-color: color(primary, dark);
///   color: color(#fc0000) // When used with dynamic maps that use both solid colors and map keys
///
/// @example scss - Update existing colors / variations
///   // Include in your app's `paint-settings.scss`
///   $colors: (
///     text: (
///       base: #111111,
///       funky: link
///     ),
///     link: #f8f8f8
///   );
///   // color(text, funky) will return `#f8f8f8`
///
/// @example scss - Create custom palette map
///   // Include in your app's `paint-settings.scss`
///   $colors: (
///     dragon-skin: (
///       base: #47C51D,
///       dark: dragon-skin (darken: 20%, saturate: 20%),
///       light: dragon-skin (lighten: 30%)
///       transparent: dragon-skin (transparentize: 0.6)
///     )
///   );
///
///   // Call example: `color(dragon-skin)` or `color(dragon-skin, transparent)`
///

@function color($color, $variant: base) {
  $output-color: map-get($colors, $color);
  $adjust: ();
  $is-map: false;

  @if type-of($output-color) == 'map' {
    $output-color: map-get($output-color, $variant);
    $is-map: true;
  }

  $base: nth($output-color, 1);

  @if length($output-color) > 1 {
    $adjust: nth($output-color, 2);
  }

  @if $is-map {
    @if map-has-key($colors, $base) {
      $output-color: color($base);
    } @else {
      $output-color: $base;
    }

    @each $function, $value in $adjust {
      @if function-exists($function) {
        $output-color: call($function, $output-color, $value);
      } @else {
        @error "Function '#{$function}' in #{$adjust} doesn't exist.";
      }
    }
  }

  @if not $output-color {
    $output-color: $color;
  }

  @return $output-color;
}
