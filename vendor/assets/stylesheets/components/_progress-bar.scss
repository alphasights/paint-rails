////
/// Progress Bar Component Styles
/// @group progress-bar
/// @since v0.8.34
////

/// Default settings, styles and sizes
///
/// @example scss - Basic usage
///   // Default classes
///   .progress-bar {
///     @extend %progress-bar-base;
///   }
///
///   // Custom usage
///   .project-progress-bar {
///     @extend %progress-bar-[base, primary, secondary, alert ...] ;
///     @extend %progress-bar-[small, base-size, large];
///   }
///
/// @example html - Basic markup
///   <div class="project-progress-bar">
///     <div style="width: 30%"></div>
///   </div>

$progress-bar-default-settings: (
  background-color: color(border, light),
  border: 0,
  border-radius: $global-radius / 2,
  padding: 0,
  meter: (
    selector: '> div'
  ),

  styles: (
    base: color(success, light),
    primary: color(primary),
    secondary: color(secondary),
    alert: color(alert),
    error: color(alert),
    warning: color(warning),
    success: color(success),
    info: color(info)
  ),

  sizes: (
    small: 1px,
    base-size: 3px,
    large: 10px
  )
);

$progress-bar: () !default;
$progress-bar: map-merge-settings($progress-bar-default-settings, $progress-bar);

$include-html-paint-progress-bar: true !default;

@function progress-bar-settings($setting, $property: null) {
  $output: map-get($progress-bar, $setting);

  @if $property {
    $output: map-get(map-get($progress-bar, $setting), $property);
  }

  @if type-of($output) == string {
    @return unquote($output);
  } @else {
    @return $output;
  }
}

/// Generates background color
/// @access private

@mixin progress-bar-style($color: progress-bar-settings(styles, base)) {
  background-color: $color;
}
/// Generates bar height from settings
/// @access private

@mixin progress-bar-height($height: progress-bar-settings(sizes, base-size)) {
  height: $height;
}

@mixin progress-bar-container {
  background-color: progress-bar-settings(background-color);
  border-radius: progress-bar-settings(border-radius);
  border: progress-bar-settings(border);
  margin: 0;
  padding: progress-bar-settings(padding);
}

@mixin progress-bar-meter {
  display: block;
  height: 100%;
  transition: width $global-transition-duration ease;
  width: 0;
}

%progress-bar {
  @include progress-bar-container;

  #{progress-bar-settings(meter, selector)} {
    @include progress-bar-meter;
  }
}

/// Generates progress-bar style and size placeholders
/// @access private

@mixin progress-bar-placeholders {
  @each $style, $color in progress-bar-settings(styles) {
    %progress-bar-#{$style} {
      @extend %progress-bar;

      @include progress-bar-height;

      #{progress-bar-settings(meter, selector)} {
        @include progress-bar-style($color);
      }
    }
  }

  @each $size, $value in progress-bar-settings(sizes) {
    %progress-bar-#{$size} {
      @include progress-bar-height($value);
    }
  }
}

@include exports('paint-progress-bar') {
  @include progress-bar-placeholders;

  @if $include-html-paint-progress-bar {
    .progress-bar {
      @extend %progress-bar-base;
    }
  }
}
